#Create a route table and custom route
#In the Cloud Shell window on the right side of the screen, select the More icon (...), then select Settings > Go to Classic version.
az network route-table create \
        --name publictable \
        --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
        --disable-bgp-route-propagation false

#create a custom route:
az network route-table route create \
        --route-table-name publictable \
        --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
        --name productionsubnet \
        --address-prefix 10.0.1.0/24 \
        --next-hop-type VirtualAppliance \
        --next-hop-ip-address 10.0.2.4

#Create a virtual network and subnets
#Run the following command to create the vnet virtual network and the publicsubnet subnet:
az network vnet create \
        --name vnet \
        --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
        --address-prefixes 10.0.0.0/16 \
        --subnet-name publicsubnet \
        --subnet-prefixes 10.0.0.0/24

#Run the following command in Cloud Shell to create the privatesubnet subnet:
az network vnet subnet create \
        --name privatesubnet \
        --vnet-name vnet \
        --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
        --address-prefixes 10.0.1.0/24

#Run the following command to create the dmzsubnet subnet:
az network vnet subnet create \
        --name dmzsubnet \
        --vnet-name vnet \
        --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
        --address-prefixes 10.0.2.0/24

#You should now have three subnets. Run the following command to show all of the subnets in the vnet virtual network:
az network vnet subnet list \
        --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
        --vnet-name vnet \
        --output table

#Associate the route table with the public subnet
az network vnet subnet update \
        --name publicsubnet \
        --vnet-name vnet \
        --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
        --route-table publictable

#*********************************************************************************************************************

#Deploy the network virtual appliance
az vm create \
    --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
    --name nva \
    --vnet-name vnet \
    --subnet dmzsubnet \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --admin-password <password>

#Enable IP forwarding for the Azure network interface
#you enable IP forwarding for the nva network appliance. When traffic flows to the NVA but is meant for another target, the NVA will route that traffic to its correct destination.

#1.Run the following command to get the NVA network interface's ID
NICID=$(az vm nic list \
    --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
    --vm-name nva \
    --query "[].{id:id}" --output tsv)

echo $NICID

#2.Run the following command to get the NVA network interface's name:
NICNAME=$(az vm nic show \
    --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
    --vm-name nva \
    --nic $NICID \
    --query "{name:name}" --output tsv)

echo $NICNAME

#3.Run the following command to enable IP forwarding for the network interface:
az network nic update --name $NICNAME \
    --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
    --ip-forwarding true

#Enable IP forwarding in the appliance

#1. Run the following command to save the NVA virtual machine's public IP address to the variable NVAIP
NVAIP="$(az vm list-ip-addresses \
    --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
    --name nva \
    --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
    --output tsv)"

echo $NVAIP

#2.Run the following command to enable IP forwarding within the NVA
ssh -t -o StrictHostKeyChecking=no azureuser@$NVAIP 'sudo sysctl -w net.ipv4.ip_forward=1; exit;'

#*****************************************************************************************************

#Route traffic through the NVA

#deploy a VM into the public and private subnets.
#Open the Cloud Shell editor and create a file named cloud-init.txt.
code cloud-init.txt

#Add the following configuration information to the file. With this configuration, the inetutils-traceroute package is installed when you create a new VM. This package contains the traceroute utility that you'll use later in this exercise.
#cloud-config
package_upgrade: true
packages:
   - inetutils-traceroute

#In Cloud Shell, run the following command to create the public VM. Replace <password> with a suitable password for the azureuser account.
az vm create \
    --resource-group "learn-d67dac1d-4c26-4428-b030-99e28b6bd57b" \
    --name public \
    --vnet-name vnet \
    --subnet publicsubnet \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --no-wait \
    --custom-data cloud-init.txt \
    --admin-password <password>

#Run the following command to create the private VM
az vm create \
    --resource-group "learn-72869672-0d4c-4db8-9513-6024ae1152ca" \
    --name private \
    --vnet-name vnet \
    --subnet privatesubnet \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --no-wait \
    --custom-data cloud-init.txt \
    --admin-password <password>

#Run the following Linux watch command to check that the VMs are running. The watch command periodically runs the az vm list command so that you can monitor the progress of the VMs.
watch -d -n 5 "az vm list \
    --resource-group "learn-72869672-0d4c-4db8-9513-6024ae1152ca" \
    --show-details \
    --query '[*].{Name:name, ProvisioningState:provisioningState, PowerState:powerState}' \
    --output table"

#A ProvisioningState value of "Succeeded" and a PowerState value of "VM running" indicate a successful deployment. When all three VMs are running, you're ready to move on. Press Ctrl-C to stop the command and continue with the exercise.
#Run the following command to save the public IP address of the public VM to a variable named PUBLICIP
PUBLICIP="$(az vm list-ip-addresses \
    --resource-group "learn-72869672-0d4c-4db8-9513-6024ae1152ca" \
    --name public \
    --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
    --output tsv)"

echo $PUBLICIP

#save the public IP address of the private VM to a variable named PRIVATEIP
PRIVATEIP="$(az vm list-ip-addresses \
    --resource-group "learn-72869672-0d4c-4db8-9513-6024ae1152ca" \
    --name private \
    --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
    --output tsv)"

echo $PRIVATEIP

#Test traffic routing through the network virtual appliance
#The final steps use the Linux traceroute utility to show how traffic is routed. You'll use the ssh command to run traceroute on each VM. The first test shows the route taken by ICMP packets sent from the public VM
#to the private VM. The second test shows the route taken by ICMP packets sent from the private VM to the public VM.
#Run the following command to trace the route from public to private. 
ssh -t -o StrictHostKeyChecking=no azureuser@$PUBLICIP 'traceroute private --type=icmp; exit'

#If you receive the error message bash: traceroute: command not found, wait a minute and retry the command. The automated installation of traceroute can take a minute or two after VM deployment. 
#After the command succeeds, the output should look similar to the following example:

                traceroute to private.kzffavtrkpeulburui2lgywxwg.gx.internal.cloudapp.net (10.0.1.4), 64 hops max
                1   10.0.2.4  0.710ms  0.410ms  0.536ms
                2   10.0.1.4  0.966ms  0.981ms  1.268ms
                Connection to 52.165.151.216 closed.

#Run the following command to trace the route from private to public. 
ssh -t -o StrictHostKeyChecking=no azureuser@$PRIVATEIP 'traceroute public --type=icmp; exit'

#You should see the traffic go directly to public (10.0.0.4) and not through the NVA, as shown in the following command output.
#The private VM is using default routes, and traffic is routed directly between the subnets.

                traceroute to public.kzffavtrkpeulburui2lgywxwg.gx.internal.cloudapp.net (10.0.0.4), 64 hops max
                1   10.0.0.4  1.095ms  1.610ms  0.812ms
                Connection to 52.173.21.188 closed.





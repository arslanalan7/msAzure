#Deploy a container instance in Azure using the Azure CLI

#Create a resource group
az group create --name myResourceGroup --location eastus

#Create a container: o create a container instance with the Azure CLI, provide a resource group name, container instance name, and Docker container image to the az container create command.
#In this quickstart, you use the public mcr.microsoft.com/azuredocs/aci-helloworld image. This image packages a small web app written in Node.js that serves a static HTML page.
#You can expose your containers to the internet by specifying one or more ports to open, a DNS name label, or both. In this quickstart, you deploy a container with a DNS name label so that the web app is publicly reachable.
#Execute a command similar to the following to start a container instance. Set a --dns-name-label value that's unique within the Azure region where you create the instance. If you receive a "DNS name label not available" error message, try a different DNS name label.
az container create --resource-group myResourceGroup --name mycontainer --image mcr.microsoft.com/azuredocs/aci-helloworld --dns-name-label aci-demo --ports 80 --os-type linux --memory 1.5 --cpu 1

#Within a few seconds, you should get a response from the Azure CLI indicating the deployment completed. Check its status with the az container show command:
az container show --resource-group myResourceGroup --name mycontainer --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" --out table

  #When you run the command, the container's fully qualified domain name (FQDN) and its provisioning state are displayed.
        FQDN                               ProvisioningState
      ---------------------------------  -------------------
      aci-demo.eastus.azurecontainer.io  Succeeded

#If the container's ProvisioningState is Succeeded, go to its FQDN in your browser. If you see a web page similar to the following(Welcome to the Azure Container Instances), congratulations! You successfully deployed an application running in a Docker container to Azure.
#If at first the application isn't displayed, you might need to wait a few seconds while DNS propagates, then try refreshing your browser.

#Pull the container logs
az container logs --resource-group myResourceGroup --name mycontainer

  #The output displays the logs for the container, and should show the HTTP GET requests generated when you viewed the application in your browser.
      listening on port 80
      ::ffff:10.240.255.55 - - [21/Mar/2019:17:43:53 +0000] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"
      ::ffff:10.240.255.55 - - [21/Mar/2019:17:44:36 +0000] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"
      ::ffff:10.240.255.55 - - [21/Mar/2019:17:44:36 +0000] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"

#Attach output streams: In addition to viewing the logs, you can attach your local standard out and standard error streams to that of the container.
az container attach --resource-group myResourceGroup --name mycontainer

#Once attached, refresh your browser a few times to generate some more output. When you're done, detach your console with Control+C. You should see output similar to the following sample:
Container 'mycontainer' is in state 'Running'...
          (count: 1) (last timestamp: 2019-03-21 17:27:20+00:00) pulling image "mcr.microsoft.com/azuredocs/aci-helloworld"
          (count: 1) (last timestamp: 2019-03-21 17:27:24+00:00) Successfully pulled image "mcr.microsoft.com/azuredocs/aci-helloworld"
          (count: 1) (last timestamp: 2019-03-21 17:27:27+00:00) Created container
          (count: 1) (last timestamp: 2019-03-21 17:27:27+00:00) Started container
          
          Start streaming logs:
          listening on port 80
          
          ::ffff:10.240.255.55 - - [21/Mar/2019:17:43:53 +0000] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"
          ::ffff:10.240.255.55 - - [21/Mar/2019:17:44:36 +0000] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"
          ::ffff:10.240.255.55 - - [21/Mar/2019:17:44:36 +0000] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"
          ::ffff:10.240.255.55 - - [21/Mar/2019:17:47:01 +0000] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"
          ::ffff:10.240.255.56 - - [21/Mar/2019:17:47:12 +0000] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"

#Clean up resources: When you're done with the container, remove it using the az container delete command:
az container delete --resource-group myResourceGroup --name mycontainer

#To verify that the container deleted, execute the az container list command:
az container list --resource-group myResourceGroup --output table

#You use the Kubernetes command-line client, kubectl, to manage Kubernetes clusters. kubectl is already installed if you use Azure Cloud Shell.

#**************************PowerShell***********************************************

#Connect to the AKS cluster
#Configure kubectl to connect to your Kubernetes cluster using the Import-AzAksCredential cmdlet. This command downloads credentials and configures the Kubernetes CLI to use them.
Import-AzAksCredential -ResourceGroupName myResourceGroup -Name myAKSCluster

#Verify the connection to your cluster using kubectl get to return a list of the cluster nodes.
kubectl get nodes

#The following example output shows the single node created in the previous steps. Make sure the node status is Ready.
          NAME                       STATUS  ROLES   AGE     VERSION
          aks-nodepool1-31718369-0   Ready   agent   6m44s   v1.15.10




#***********************************Azure CLI********************************************************

#Configure kubectl to connect to your Kubernetes cluster using the az aks get-credentials command. This command downloads credentials and configures the Kubernetes CLI to use them.
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster

#Verify the connection to your cluster using kubectl get to return a list of the cluster nodes.
kubectl get nodes

#The following example output shows the single node created in the previous steps. Make sure the node status is Ready.
        NAME                       STATUS   ROLES   AGE     VERSION
        aks-nodepool1-31718369-0   Ready    agent   6m44s   v1.15.10





#******************************************************Deploy the application*********************************************************************************

You use a manifest file to create all the objects required to run the AKS Store application. A Kubernetes manifest file defines a cluster's desired state, such as which container images to run. The manifest includes the following Kubernetes deployments and services:
#Customers -> store-front (Vue.js) -> order-service (Node.js) -> Order Queue (RabbitMQ)
#Customers -> store-front (Vue.js) -> product-service (Rust)
#Store front: Web application for customers to view products and place orders.
#Product service: Shows product information.
#Order service: Places orders.
#Rabbit MQ: Message queue for an order queue.

#Note: We don't recommend running stateful containers, such as Rabbit MQ, without persistent storage for production. These are used here for simplicity, but we recommend using managed services, such as Azure CosmosDB or Azure Service Bus.

#1. In the Cloud Shell, open an editor and create a file named aks-store-quickstart.yaml.

#2. Paste the following manifest into the editor:
                          apiVersion: apps/v1
                          kind: StatefulSet
                          metadata:
                            name: rabbitmq
                          spec:
                            serviceName: rabbitmq
                            replicas: 1
                            selector:
                              matchLabels:
                                app: rabbitmq
                            template:
                              metadata:
                                labels:
                                  app: rabbitmq
                              spec:
                                nodeSelector:
                                  "kubernetes.io/os": linux
                                containers:
                                - name: rabbitmq
                                  image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
                                  ports:
                                  - containerPort: 5672
                                    name: rabbitmq-amqp
                                  - containerPort: 15672
                                    name: rabbitmq-http
                                  env:
                                  - name: RABBITMQ_DEFAULT_USER
                                    value: "username"
                                  - name: RABBITMQ_DEFAULT_PASS
                                    value: "password"
                                  resources:
                                    requests:
                                      cpu: 10m
                                      memory: 128Mi
                                    limits:
                                      cpu: 250m
                                      memory: 256Mi
                                  volumeMounts:
                                  - name: rabbitmq-enabled-plugins
                                    mountPath: /etc/rabbitmq/enabled_plugins
                                    subPath: enabled_plugins
                                volumes:
                                - name: rabbitmq-enabled-plugins
                                  configMap:
                                    name: rabbitmq-enabled-plugins
                                    items:
                                    - key: rabbitmq_enabled_plugins
                                      path: enabled_plugins
                          ---
                          apiVersion: v1
                          data:
                            rabbitmq_enabled_plugins: |
                              [rabbitmq_management,rabbitmq_prometheus,rabbitmq_amqp1_0].
                          kind: ConfigMap
                          metadata:
                            name: rabbitmq-enabled-plugins
                          ---
                          apiVersion: v1
                          kind: Service
                          metadata:
                            name: rabbitmq
                          spec:
                            selector:
                              app: rabbitmq
                            ports:
                              - name: rabbitmq-amqp
                                port: 5672
                                targetPort: 5672
                              - name: rabbitmq-http
                                port: 15672
                                targetPort: 15672
                            type: ClusterIP
                          ---
                          apiVersion: apps/v1
                          kind: Deployment
                          metadata:
                            name: order-service
                          spec:
                            replicas: 1
                            selector:
                              matchLabels:
                                app: order-service
                            template:
                              metadata:
                                labels:
                                  app: order-service
                              spec:
                                nodeSelector:
                                  "kubernetes.io/os": linux
                                containers:
                                - name: order-service
                                  image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
                                  ports:
                                  - containerPort: 3000
                                  env:
                                  - name: ORDER_QUEUE_HOSTNAME
                                    value: "rabbitmq"
                                  - name: ORDER_QUEUE_PORT
                                    value: "5672"
                                  - name: ORDER_QUEUE_USERNAME
                                    value: "username"
                                  - name: ORDER_QUEUE_PASSWORD
                                    value: "password"
                                  - name: ORDER_QUEUE_NAME
                                    value: "orders"
                                  - name: FASTIFY_ADDRESS
                                    value: "0.0.0.0"
                                  resources:
                                    requests:
                                      cpu: 1m
                                      memory: 50Mi
                                    limits:
                                      cpu: 75m
                                      memory: 128Mi
                                  startupProbe:
                                    httpGet:
                                      path: /health
                                      port: 3000
                                    failureThreshold: 5
                                    initialDelaySeconds: 20
                                    periodSeconds: 10
                                  readinessProbe:
                                    httpGet:
                                      path: /health
                                      port: 3000
                                    failureThreshold: 3
                                    initialDelaySeconds: 3
                                    periodSeconds: 5
                                  livenessProbe:
                                    httpGet:
                                      path: /health
                                      port: 3000
                                    failureThreshold: 5
                                    initialDelaySeconds: 3
                                    periodSeconds: 3
                                initContainers:
                                - name: wait-for-rabbitmq
                                  image: busybox
                                  command: ['sh', '-c', 'until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;']
                                  resources:
                                    requests:
                                      cpu: 1m
                                      memory: 50Mi
                                    limits:
                                      cpu: 75m
                                      memory: 128Mi
                          ---
                          apiVersion: v1
                          kind: Service
                          metadata:
                            name: order-service
                          spec:
                            type: ClusterIP
                            ports:
                            - name: http
                              port: 3000
                              targetPort: 3000
                            selector:
                              app: order-service
                          ---
                          apiVersion: apps/v1
                          kind: Deployment
                          metadata:
                            name: product-service
                          spec:
                            replicas: 1
                            selector:
                              matchLabels:
                                app: product-service
                            template:
                              metadata:
                                labels:
                                  app: product-service
                              spec:
                                nodeSelector:
                                  "kubernetes.io/os": linux
                                containers:
                                - name: product-service
                                  image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
                                  ports:
                                  - containerPort: 3002
                                  env:
                                  - name: AI_SERVICE_URL
                                    value: "http://ai-service:5001/"
                                  resources:
                                    requests:
                                      cpu: 1m
                                      memory: 1Mi
                                    limits:
                                      cpu: 2m
                                      memory: 20Mi
                                  readinessProbe:
                                    httpGet:
                                      path: /health
                                      port: 3002
                                    failureThreshold: 3
                                    initialDelaySeconds: 3
                                    periodSeconds: 5
                                  livenessProbe:
                                    httpGet:
                                      path: /health
                                      port: 3002
                                    failureThreshold: 5
                                    initialDelaySeconds: 3
                                    periodSeconds: 3
                          ---
                          apiVersion: v1
                          kind: Service
                          metadata:
                            name: product-service
                          spec:
                            type: ClusterIP
                            ports:
                            - name: http
                              port: 3002
                              targetPort: 3002
                            selector:
                              app: product-service
                          ---
                          apiVersion: apps/v1
                          kind: Deployment
                          metadata:
                            name: store-front
                          spec:
                            replicas: 1
                            selector:
                              matchLabels:
                                app: store-front
                            template:
                              metadata:
                                labels:
                                  app: store-front
                              spec:
                                nodeSelector:
                                  "kubernetes.io/os": linux
                                containers:
                                - name: store-front
                                  image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
                                  ports:
                                  - containerPort: 8080
                                    name: store-front
                                  env:
                                  - name: VUE_APP_ORDER_SERVICE_URL
                                    value: "http://order-service:3000/"
                                  - name: VUE_APP_PRODUCT_SERVICE_URL
                                    value: "http://product-service:3002/"
                                  resources:
                                    requests:
                                      cpu: 1m
                                      memory: 200Mi
                                    limits:
                                      cpu: 1000m
                                      memory: 512Mi
                                  startupProbe:
                                    httpGet:
                                      path: /health
                                      port: 8080
                                    failureThreshold: 3
                                    initialDelaySeconds: 5
                                    periodSeconds: 5
                                  readinessProbe:
                                    httpGet:
                                      path: /health
                                      port: 8080
                                    failureThreshold: 3
                                    initialDelaySeconds: 3
                                    periodSeconds: 3
                                  livenessProbe:
                                    httpGet:
                                      path: /health
                                      port: 8080
                                    failureThreshold: 5
                                    initialDelaySeconds: 3
                                    periodSeconds: 3
                          ---
                          apiVersion: v1
                          kind: Service
                          metadata:
                            name: store-front
                          spec:
                            ports:
                            - port: 80
                              targetPort: 8080
                            selector:
                              app: store-front
                            type: LoadBalancer

#3. Deploy the application using the kubectl apply command and specify the name of your YAML manifest:
kubectl apply -f aks-store-quickstart.yaml

  #The following example output shows the deployments and services:
    deployment.apps/rabbitmq created
    service/rabbitmq created
    deployment.apps/order-service created
    service/order-service created
    deployment.apps/product-service created
    service/product-service created
    deployment.apps/store-front created
    service/store-front created

#*************************Test the application************************************************

#1. Check the status of the deployed pods using the kubectl get pods command. Make sure all pods are Running before proceeding.
kubectl get pods

#2. Check for a public IP address for the store-front application. Monitor progress using the kubectl get service command with the --watch argument.
kubectl get service store-front --watch

  #The EXTERNAL-IP output for the store-front service initially shows as pending:
    NAME          TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
    store-front   LoadBalancer   10.0.100.10   <pending>     80:30025/TCP   4h4m

#3. Open a web browser to the external IP address of your service to see the Azure Store app in action.

az group create --name learn-deploy-aci-rg --location eastus  #create resource group. When you delete this group all the resources in this group will be deleted. 
                                                              #So, you will ensure the complete deletion of test resources
DNS_NAME_LABEL=aci-demo-$RANDOM                              #to create a Bash variable that holds a unique DNS name

#Create a container. mcr.microsoft.com/azuredocs/aci-helloworld is a basic Node.js web application
az container create \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer \
  --image mcr.microsoft.com/azuredocs/aci-helloworld \
  --os-type Linux \
  --cpu 1 \
  --memory 1.5 \
  --ports 80 \
  --dns-name-label $DNS_NAME_LABEL \
  --location eastus

#When the az container create command completes, run az container show to check its status
az container show \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer \
  --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" \
  --output table

 #                                                   Output
 #                                                   
 #                                                   Copy
 #                                                   FQDN                                    ProvisioningState
 #                                                   --------------------------------------  -------------------
 #                                                   aci-demo-0000.eastus.azurecontainer.io  Succeeded

#From a browser, go to your container's FQDN to see it running

#Run az container show to check your container's status:
az container show \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer-restart-demo \
  --query "containers[0].instanceView.currentState.state"

#Run az container logs to view the container's logs to examine the output:
az container logs \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer-restart-demo

#              Output
#              
#              Copy
#              [('the', 990),
#               ('and', 702),
#               ('of', 628),
#               ('to', 610),
#               ('I', 544),
#               ('you', 495),
#               ('a', 453),
#               ('my', 441),
#               ('in', 399),
#               ('HAMLET', 386)]

#Deploy Azure Cosmos DB*******************************************************************************************
COSMOS_DB_NAME=aci-cosmos-db-$RANDOM       #provide a unique database name

#Run this az cosmosdb create command to create your Azure Cosmos DB instance:
#the command saves the endpoint address for your database address to the Bash variable COSMOS_DB_ENDPOINT
COSMOS_DB_ENDPOINT=$(az cosmosdb create \
  --resource-group learn-deploy-aci-rg \
  --name $COSMOS_DB_NAME \
  --query documentEndpoint \
  --output tsv)

#Run az cosmosdb keys list to get the Azure Cosmos DB connection key and store it in a Bash variable named COSMOS_DB_MASTERKEY:
COSMOS_DB_MASTERKEY=$(az cosmosdb keys list \
  --resource-group learn-deploy-aci-rg \
  --name $COSMOS_DB_NAME \
  --query primaryMasterKey \
  --output tsv)

#Deploy a container that works with your database
#Run the following az container create command to create the container:
#azuredocs/azure-vote-front:cosmosdb refers to a container image that runs a fictitious voting app.
#Note the --environment-variables argument. This argument specifies environment variables that are passed to the container when the container starts. 
#The container image is configured to look for these environment variables. Pass the name of the Azure Cosmos DB endpoint and its connection key.
az container create \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo \
  --image mcr.microsoft.com/azuredocs/azure-vote-front:cosmosdb \
  --ip-address Public \
  --location eastus \
  --environment-variables \
    COSMOS_DB_ENDPOINT=$COSMOS_DB_ENDPOINT \
    COSMOS_DB_MASTERKEY=$COSMOS_DB_MASTERKEY

#Run the az container show command to get your container's public IP address:
#In a browser, go to your container's IP address.
az container show \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo \
  --query ipAddress.ip \
  --output tsv

#Use secured environment variables to hide connection information
#Run the following az container show command to display your container's environment variables: You get output with both values in plain text. Here's an example:
az container show \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo \
  --query containers[0].environmentVariables

#                 JSON
#                
#                  Copy
#                  [
#                    {
#                      "name": "COSMOS_DB_ENDPOINT",
#                      "secureValue": null,
#                      "value": "https://aci-cosmos.documents.azure.com:443/"
#                    },
#                    {
#                      "name": "COSMOS_DB_MASTERKEY",
#                      "secureValue": null,
#                      "value": "abcdefghijklmnopqrztuvwxyz0123456789=="
#                    }
#                  ]

#Run the following command to create a second container named aci-demo-secure that makes use of secured environment variables:
#Note the use of the --secure-environment-variables argument.
az container create \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-secure \
  --image mcr.microsoft.com/azuredocs/azure-vote-front:cosmosdb \
  --ip-address Public \
  --location eastus \
  --secure-environment-variables \
    COSMOS_DB_ENDPOINT=$COSMOS_DB_ENDPOINT \
    COSMOS_DB_MASTERKEY=$COSMOS_DB_MASTERKEY

#Run the following az container show command to display your container's environment variables:
#This time, you can see that your environment variables don't appear in plain text:
az container show \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-secure \
  --query containers[0].environmentVariables

#        JSON
#        
#        Copy
#        [
#          {
#            "name": "COSMOS_DB_ENDPOINT",
#            "secureValue": null,
#            "value": null
#          },
#          {
#            "name": "COSMOS_DB_MASTERKEY",
#            "secureValue": null,
#            "value": null
#          }
        ]

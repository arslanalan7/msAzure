az group create --name learn-deploy-aci-rg --location eastus  #create resource group. When you delete this group all the resources in this group will be deleted. 
                                                              #So, you will ensure the complete deletion of test resources
DNS_NAME_LABEL=aci-demo-$RANDOM                              #to create a Bash variable that holds a unique DNS name

#Create a container. mcr.microsoft.com/azuredocs/aci-helloworld is a basic Node.js web application
az container create \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer \
  --image mcr.microsoft.com/azuredocs/aci-helloworld \
  --os-type Linux \
  --cpu 1 \
  --memory 1.5 \
  --ports 80 \
  --dns-name-label $DNS_NAME_LABEL \
  --location eastus

#When the az container create command completes, run az container show to check its status
az container show \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer \
  --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" \
  --output table

 #                                                   Output
 #                                                   
 #                                                   Copy
 #                                                   FQDN                                    ProvisioningState
 #                                                   --------------------------------------  -------------------
 #                                                   aci-demo-0000.eastus.azurecontainer.io  Succeeded

#From a browser, go to your container's FQDN to see it running

#Run az container show to check your container's status:
az container show \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer-restart-demo \
  --query "containers[0].instanceView.currentState.state"

#Run az container logs to view the container's logs to examine the output:
az container logs \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer-restart-demo

#              Output
#              
#              Copy
#              [('the', 990),
#               ('and', 702),
#               ('of', 628),
#               ('to', 610),
#               ('I', 544),
#               ('you', 495),
#               ('a', 453),
#               ('my', 441),
#               ('in', 399),
#               ('HAMLET', 386)]

#Deploy Azure Cosmos DB*******************************************************************************************
COSMOS_DB_NAME=aci-cosmos-db-$RANDOM       #provide a unique database name

#Run this az cosmosdb create command to create your Azure Cosmos DB instance:
#the command saves the endpoint address for your database address to the Bash variable COSMOS_DB_ENDPOINT
COSMOS_DB_ENDPOINT=$(az cosmosdb create \
  --resource-group learn-deploy-aci-rg \
  --name $COSMOS_DB_NAME \
  --query documentEndpoint \
  --output tsv)

#Run az cosmosdb keys list to get the Azure Cosmos DB connection key and store it in a Bash variable named COSMOS_DB_MASTERKEY:
COSMOS_DB_MASTERKEY=$(az cosmosdb keys list \
  --resource-group learn-deploy-aci-rg \
  --name $COSMOS_DB_NAME \
  --query primaryMasterKey \
  --output tsv)

#Deploy a container that works with your database
#Run the following az container create command to create the container:
#azuredocs/azure-vote-front:cosmosdb refers to a container image that runs a fictitious voting app.
#Note the --environment-variables argument. This argument specifies environment variables that are passed to the container when the container starts. 
#The container image is configured to look for these environment variables. Pass the name of the Azure Cosmos DB endpoint and its connection key.
az container create \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo \
  --image mcr.microsoft.com/azuredocs/azure-vote-front:cosmosdb \
  --ip-address Public \
  --location eastus \
  --environment-variables \
    COSMOS_DB_ENDPOINT=$COSMOS_DB_ENDPOINT \
    COSMOS_DB_MASTERKEY=$COSMOS_DB_MASTERKEY

#Run the az container show command to get your container's public IP address:
#In a browser, go to your container's IP address.
az container show \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo \
  --query ipAddress.ip \
  --output tsv

#Use secured environment variables to hide connection information
#Run the following az container show command to display your container's environment variables: You get output with both values in plain text. Here's an example:
az container show \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo \
  --query containers[0].environmentVariables

#                 JSON
#                
#                  Copy
#                  [
#                    {
#                      "name": "COSMOS_DB_ENDPOINT",
#                      "secureValue": null,
#                      "value": "https://aci-cosmos.documents.azure.com:443/"
#                    },
#                    {
#                      "name": "COSMOS_DB_MASTERKEY",
#                      "secureValue": null,
#                      "value": "abcdefghijklmnopqrztuvwxyz0123456789=="
#                    }
#                  ]

#Run the following command to create a second container named aci-demo-secure that makes use of secured environment variables:
#Note the use of the --secure-environment-variables argument.
az container create \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-secure \
  --image mcr.microsoft.com/azuredocs/azure-vote-front:cosmosdb \
  --ip-address Public \
  --location eastus \
  --secure-environment-variables \
    COSMOS_DB_ENDPOINT=$COSMOS_DB_ENDPOINT \
    COSMOS_DB_MASTERKEY=$COSMOS_DB_MASTERKEY

#Run the following az container show command to display your container's environment variables:
#This time, you can see that your environment variables don't appear in plain text:
az container show \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-secure \
  --query containers[0].environmentVariables

#        JSON
#        
#        Copy
#        [
#          {
#            "name": "COSMOS_DB_ENDPOINT",
#            "secureValue": null,
#            "value": null
#          },
#          {
#            "name": "COSMOS_DB_MASTERKEY",
#            "secureValue": null,
#            "value": null
#          }
        ]

#Use data volumes****************************************************************************************************
#By default, Azure Container Instances are stateless. If the container crashes or stops, all of its state is lost. 
#To persist state beyond the lifetime of the container, you must mount a volume from an external store.

#Your storage account requires a unique name. For learning purposes, run the following command to store a unique name in a Bash variable:
STORAGE_ACCOUNT_NAME=mystorageaccount$RANDOM

#Run the following az storage account create command to create your storage account:
az storage account create \
  --resource-group learn-deploy-aci-rg \
  --name $STORAGE_ACCOUNT_NAME \
  --sku Standard_LRS \
  --location eastus

#Run the following command to place the storage account connection string into an environment variable named AZURE_STORAGE_CONNECTION_STRING:
export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string \
  --resource-group learn-deploy-aci-rg \
  --name $STORAGE_ACCOUNT_NAME \
  --output tsv)

#AZURE_STORAGE_CONNECTION_STRING is a special environment variable that the Azure CLI understands. 
#The export part makes this variable accessible to other CLI commands that you run later.
#Run this command to create a file share named aci-share-demo in the storage account:
az storage share create --name aci-share-demo

#Get storage credentials

#Run the following command to get the storage account key:
STORAGE_KEY=$(az storage account keys list \
  --resource-group learn-deploy-aci-rg \
  --account-name $STORAGE_ACCOUNT_NAME \
  --query "[0].value" \
  --output tsv)

#Deploy a container and mount the file share

#Run this az container create command to create a container that mounts /aci/logs/ to your file share:
az container create \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-files \
  --image mcr.microsoft.com/azuredocs/aci-hellofiles \
  --location eastus \
  --ports 80 \
  --ip-address Public \
  --azure-file-volume-account-name $STORAGE_ACCOUNT_NAME \
  --azure-file-volume-account-key $STORAGE_KEY \
  --azure-file-volume-share-name aci-share-demo \
  --azure-file-volume-mount-path /aci/logs/

#Run az container show to get your container's public IP address:
#From a browser, navigate to your container's IP address. You get a page with Text area and Text Submit button
#Submit action creates a file that contains the text you entered in the Azure file share.
az container show \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-files \
  --query ipAddress.ip \
  --output tsv

#Run this az storage file list command to display the files that are contained in your file share:
az storage file list -s aci-share-demo -o table

#Run az storage file download to download a file to your Cloud Shell session. Replace <filename> with one of the files that appeared in the previous step:
az storage file download -s aci-share-demo -p <filename>

#Run the cat command to print the contents of the file.
cat <filename>

#Get logs from your prior deployed container instance*********************************************************************************
#Run the following az container logs command to see the output from the cats and dogs voting app container you created in the prior exercise:
az container logs \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-files

#You get a similar output to:
#                    Output
#                    
#                    Checking for script in /app/prestart.sh
#                    Running script /app/prestart.sh
#                    Running inside /app/prestart.sh, you could add migrations to this file, e.g.:
#                    
#                    #! /usr/bin/env bash
#                    
#                    # Let the DB start
#                    sleep 10;
#                    # Run migrations
#                    alembic upgrade head

#Get container events

#Run az container attach to attach to your container:
#Enter Ctrl+C to disconnect from your attached container.
az container attach \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-files

#You get a similar output to:

#              Output
              
#              Container 'aci-demo-files' is in state 'Running'...
#              (count: 1) (last timestamp: 2021-09-21 23:48:14+00:00) pulling image "mcr.microsoft.com/azuredocs/azure-vote-front"
#              (count: 1) (last timestamp: 2021-09-21 23:49:09+00:00) Successfully pulled image "mcr.microsoft.com/azuredocs/azure-vote-front"
#              (count: 1) (last timestamp: 2021-09-21 23:49:12+00:00) Created container
#              (count: 1) (last timestamp: 2021-09-21 23:49:13+00:00) Started container
#              
#              Start streaming logs:
#              Checking for script in /app/prestart.sh
#              Running script /app/prestart.sh

#Execute a command in your container

#To see commands in your container, run the following az container exec command to start an interactive session on your container:
az container exec \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-files \
  --exec-command /bin/sh

#At this point, you're effectively working inside of the container.
#Run the ls command to display the contents of the working directory.
# ls
__pycache__  config_file.cfg  main.py  prestart.sh  static  templates  uwsgi.ini

#You can explore the system further if you wish. When you're done, run the exit command to stop the interactive session.

#Monitor CPU and memory usage on your container

#Run the following az container show command to get the ID of your Azure container instance and store the ID in a Bash variable:
CONTAINER_ID=$(az container show \
  --resource-group learn-deploy-aci-rg \
  --name aci-demo-files \
  --query id \
  --output tsv)

#Run the az monitor metrics list command to retrieve CPU usage information:
#Note the --metrics argument. Here, CPUUsage specifies to retrieve CPU usage.
az monitor metrics list \
  --resource $CONTAINER_ID \
  --metrics CPUUsage \
  --output table

#Output

#                Timestamp            Name          Average
#                -------------------  ------------  -----------
#                2021-09-21 23:39:00  CPU Usage
#                2021-09-21 23:40:00  CPU Usage
#                2021-09-21 23:41:00  CPU Usage
#                2021-09-21 23:42:00  CPU Usage
#                2021-09-21 23:43:00  CPU Usage      0.375
#                2021-09-21 23:44:00  CPU Usage      0.875
#                2021-09-21 23:45:00  CPU Usage      1
#                2021-09-21 23:46:00  CPU Usage      3.625
#                2021-09-21 23:47:00  CPU Usage      1.5
#                2021-09-21 23:48:00  CPU Usage      2.75
#                2021-09-21 23:49:00  CPU Usage      1.625
#                2021-09-21 23:50:00  CPU Usage      0.625
#                2021-09-21 23:51:00  CPU Usage      0.5
#                2021-09-21 23:52:00  CPU Usage      0.5
#                2021-09-21 23:53:00  CPU Usage      0.5

#Run this az monitor metrics list command to retrieve memory usage information:
#Here, you specified MemoryUsage for the --metrics argument to retrieve memory usage information.
az monitor metrics list \
  --resource $CONTAINER_ID \
  --metrics MemoryUsage \
  --output table

#Output

#              Timestamp            Name          Average
#              -------------------  ------------  -----------
#              2021-09-21 23:43:00  Memory Usage
#              2021-09-21 23:44:00  Memory Usage  0.0
#              2021-09-21 23:45:00  Memory Usage  15917056.0
#              2021-09-21 23:46:00  Memory Usage  16744448.0
#              2021-09-21 23:47:00  Memory Usage  16842752.0
#              2021-09-21 23:48:00  Memory Usage  17190912.0
#              2021-09-21 23:49:00  Memory Usage  17506304.0
#              2021-09-21 23:50:00  Memory Usage  17702912.0
#              2021-09-21 23:51:00  Memory Usage  17965056.0
#              2021-09-21 23:52:00  Memory Usage  18509824.0
#              2021-09-21 23:53:00  Memory Usage  18649088.0
#              2021-09-21 23:54:00  Memory Usage  18845696.0
#              2021-09-21 23:55:00  Memory Usage  19181568.0


#Clean up resources**************************************
#In this module, you created resources using your Azure subscription. You should clean up these resources so that you aren't still charged for them.

#In the Azure home page, select All resources.

#Find the learn-deploy-aci-rg resource group, or whatever resource group name you used, and select it.

#In the Overview tab of the resource group, select Delete resource group.

#A new dialog box opens. Enter the name of the resource group and select Delete.

#Select Delete again to confirm deletion. All of the resources we created in this module are deleted.


